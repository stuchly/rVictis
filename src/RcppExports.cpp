// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getArchictectureStatus
std::string getArchictectureStatus();
RcppExport SEXP _rVictis_getArchictectureStatus() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getArchictectureStatus());
    return rcpp_result_gen;
END_RCPP
}
// jaccard_coeff_parallel
NumericMatrix jaccard_coeff_parallel(NumericMatrix idx);
RcppExport SEXP _rVictis_jaccard_coeff_parallel(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_coeff_parallel(idx));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_coeff
NumericMatrix jaccard_coeff(NumericMatrix idx);
RcppExport SEXP _rVictis_jaccard_coeff(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_coeff(idx));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_coeff_true_parallel
NumericMatrix jaccard_coeff_true_parallel(NumericMatrix idx, int threshold);
RcppExport SEXP _rVictis_jaccard_coeff_true_parallel(SEXP idxSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_coeff_true_parallel(idx, threshold));
    return rcpp_result_gen;
END_RCPP
}
// knn_annoy
SEXP knn_annoy(Rcpp::NumericMatrix mat, const int K, const int trees);
RcppExport SEXP _rVictis_knn_annoy(SEXP matSEXP, SEXP KSEXP, SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_annoy(mat, K, trees));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rVictis_getArchictectureStatus", (DL_FUNC) &_rVictis_getArchictectureStatus, 0},
    {"_rVictis_jaccard_coeff_parallel", (DL_FUNC) &_rVictis_jaccard_coeff_parallel, 1},
    {"_rVictis_jaccard_coeff", (DL_FUNC) &_rVictis_jaccard_coeff, 1},
    {"_rVictis_jaccard_coeff_true_parallel", (DL_FUNC) &_rVictis_jaccard_coeff_true_parallel, 2},
    {"_rVictis_knn_annoy", (DL_FUNC) &_rVictis_knn_annoy, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rVictis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
